note:RF使用CART算法的增长树,也就是说Gini指数来划分
Gini指数度量的是数据区分或者训练集D的不纯度.Gini不纯度表示的是一个随机选中的样本在子集中被分错的可能性.
Gini不纯度为这个样本被选中的概率乘上它被分错的概率.
当一个节点中所有样本都是一个类时,Gini不纯度为0.
-----------------------------------------------------------------------------------------------------
熵描述的是不确定性,熵越大,不确定性就越大.
条件熵H(B|A)描述的是在A给定的条件下B的不确定性,如果条件熵越小,表示不确定性就越小,那么B就越容易被确定.
所以使用熵-条件熵=信息增益,描述了不确定性的降低程度,可以用来度量两个变量的相关性.
-----------------------------------------------------------------------------------------------------
RF对每一个决策树,首先对列(特征)进行采样,然后计算当前的Gini指数,随后进行全分裂过程,每棵树的非叶子节点都有一个Gini指数,一棵树建立之后可以得到该树各个节点的重要性,通过对其按照Gini指数作为特征相关性排序,接着一次建立多颗决策树,并且生成多个特征相关性排名,最后对这些特征取平均值,得到最终排好序的特征重要性排名.
-----------------------------------------------------------------------------------------------------
随机森玲OOB特征选择:
    OOB(out of bag) err 袋外误差
    1.首先建立m棵决策树,然后分别计算每棵树的OOB袋外误差errOOBj.
    2.计算特征xi的重要性.随机的修改OOB中的每个特征xi的值,再次计算它的袋外误差errOOBi;xi的重要性=sum(errOOBj-errOOBi)/Ntree
    3.按照特征的重要性排序,然后剔除后面不重要的特征
    4.重复以上步骤,直到选出m个特征
-----------------------------------------------------------------------------------------------------
scikit-learn中封装了randomforest特征选择方法:
    from sklearn.datasets import load_boston
    from sklearn.ensemble import RandomForestRegressor
    import numpy as np
    boston = load_boston()
    X = boston["data"]
    y = boston["target"]
    names = boston["feature_names"]
    rf = RandomForestRegressor()
    rf.fit(X, y)
    print "Features sorted by their score:"
    print sorted(zip(map(lambda x: round(x, 4), rf.feature_importances_), names),reverse=True)
输入以上程序即可选出boston数据集的特征
-----------------------------------------------------------------------------------------------------
mRMR 最大相关最小冗余
    这个方法考虑到了特征和label之间的相关性,还考虑了特征和特征之间的相关性.度量标准是互信息.
    特征子集与类别的相关性通过各个特征与类别的信息增益的均值来计算
    而特征与特征的冗余使用的是特征和特征之间的互信息加和在除以子集中特征个数的平方,因为l(xi,xj)计算了两次
no.1 最大相关性
    目的保持特征和类别的相关性最大
    max D(S,c), D=1/|S|*sum(I(xi;c)),xi属于S
no.2 最小冗余性
    目的保持特征之间的冗余性最小
    min R(S,c), R=1/|S|^2 * sum(I(xi;xj)) xi,xj属于S
两个公式中,S表示已经选择的特征子集,c表示class_label,x表示特征.
最后选择的标准是:
   得到的特征子集与类别相关性较大,同时保持了特征间冗余性小 
mRMR实现,github地址:https://github.com/csuldw/MachineLearning/tree/master/mRMR
